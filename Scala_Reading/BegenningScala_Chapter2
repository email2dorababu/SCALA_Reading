abc

Date Feb42016

Chapter 2:
Basics of Scala
-----------------------------------------------

Variables:
----------------------
There are 3 ways you can define variables

VAL - Immutable variable, variable that cannot be changed
VAR - Mutable variable is declared with the keyword var. But you cannot reassign to a different type.
LAZY VAL - these variables are calculated once, the first time the variable is accessed. Only vals can be lazy variables.
We use a Lazy Val if the variable may not be used and the cost of calculating it is very long.

> val x=10   now x is available for use, you cannot change it.
>x*x
res0:Int=100

res0+1
res1: Int = 101
res0+res1
res2: Int = 201
---
var y=10
again if you try to assign different type y=11.5 , gives error, because initial value is of int, but you are trying to assign double value.
y=12 executes without any error.

i.e like other oop languages, convertion to wider type is accepted, but convertion to smaller type gives error.
---------
val x=10e20  - immediately executed.
val y=10e30	-  immediately executed.

lazy val z=x*y   here the value is not calculated immediately.
z:double =<lazy>

var x=10   - immediately executed.
------------------------------------------------------------------

Scala Type Hierarchy:
----------------------
There are no primitive types in Scala. All data types are objects that have methods to operate on their data.
All Scala types - from Numbers to Collections, exists as part of a type hierarchy.
Every "class"  that you define in Scala, belongs to this hierarchy.
Scala's Core types are -

Any - AnyVal, AnyRef
AnyVal - Numeric, Boolean, Char, Unit 
AnyRef - All java.* ref types, All Scala.* ref types. (these all have null type)
AllVal, AllRef have only Nothing Type, (note that there is no null type)
(see the diag in )
(http://techbus.safaribooksonline.com/book/programming/scala/9781484202326/chapter-2-basics-of-scala/sec2_html_2?percentage=0&reader=html)

------------------------------------------------------------------

Any, AnyVal, and AnyRef Types
----------------------
Class "Any" is the root of scala class hierarchy and it is an abstract class. every class inherits from this class.
AnyVal, AnyRef extend Any type.

Numeric Types:
Scala supports automatic conversion from one type to another type in the below order. 
Conversion in reverse order is not allowed.

Byte=>Short=>Int=>Long=>Float=>Double
Byte can be converted to any other type. e.g
val x: Byte=30 ,  val Y: Short=x , val z:Double =Y

val a: Int =x  -> gives error: type mismatch.

Boolean type is limited to true or false.  val x=!false  gives x:Boolean =true.

Char literals are wirtten in single-quotes. val x='X'


UNIT type - is used to define a function that doesn't return data. Similar  to void keyword.\

val empty=() -> empty: Unit=() empty parentheses is the Unit literal.
it is also used in Main method. 
def main(args: Array[String]) : unit ={ }

Nothing and Null types:
Null is not a member of any type. 
Nothing is a subtype of every other type to provide a compatible return type for 
operations that affect a program's flow.
One of the usages of Nothing is that it signals abnormal termination. it guarnatees to have zero instances.
It is best practice in scala, that never use null values.

Instead of null, use an 'Option' instead.

Note that String is not discussed here. because String type in Scala is built on the String type of Java.





