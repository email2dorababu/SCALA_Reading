Date 9 Mar 2016

Object Orientation in Scala:   cont...
------------------------------------------------------------------------------------------------------------------
Inheritance:
------------
Scala supports single inheritance, not multiple inheritance.
A child (or derived) class can have one and only one parent (or base) class.
The sole exception is the root of the Scala class hierarchy, Any, which has no parent. 

You saw that "classes" in Scala are declared very much like Java classes, but "can also have parameters".

Vehicle class:

class Vehicle (speed : Int){
val mph :Int = speed
    def race() = println("Racing")
}
The Vehicle class takes one argument, which is the speed of the vehicle. 
This argument must be passed when creating an instance of class Vehicle, as follows: new Vehicle(100).
The class contains one method, called race.

Extending Class:
--------------
Extending from a base class in Scala is similar to extending in Java except for two restrictions: 
	i) method overriding requires the 'override' keyword, and 
	ii) only the primary constructor can pass parameters to the base constructor.

It is possible to override methods inherited from a super class in Scala as illustrated below:

Overriding methods inherited from a super class:

class Car (speed : Int) extends Vehicle(speed) {
override val mph: Int= speed
override  def race() = println("Racing Car")
}

The class Car extends Vehicle class using the keyword extends. 
The field mph and the method race needs to be overridden using the keyword override.

We will see another class Bike that extends Vehicle.

Vehicle Hierarchy:

class Vehicle (speed : Int){
val mph :Int = speed
    def race() = println("Racing")
}
class Car (speed : Int) extends Vehicle(speed) {
override val mph: Int= speed
override  def race() = println("Racing Car")

}
class Bike(speed : Int) extends Vehicle(speed) {
override val mph: Int = speed
override  def race() = println("Racing Bike")

}



>scalac vehicle.scala
	Now you can enter the REPL using the scala command and create the vehicle object as shown here:
scala> val vehicle1 = new Car(200)
	With this command, Scala creates the vehicle1 object as shown here:
vehicle1: Car = Car@19a8942
	Now you can use this vehicle1 object created by Scala to access the speed of the Car:
scala> vehicle1.mph
	Scala REPL emits the speed of the Car as shown here:
res1: Int = 200
	In the similar manner, you can execute the race method of vehicle1:
scala>vehicle1.race()
	Scala interpreter emits the output as shown here:
Racing Car
	Now you can create the Bike object and access its property and method:
scala> val vehicle2 = new Bike(100)
vehicle2: Bike = Bike@b7ad3
scala>vehicle2.mph
res4: Int = 100
scala> vehicle2.race()
Racing Bike
----------------------------------------------------------------------------------------------------------------

++++++++++
Traits:
+++++++++++

Suppose you want to add another class to your vehicle hierarchy. say Batmobile.
Batmobile can race,glide and fly.

But you cannot add glide and fly methods to the Vehicle class because in a nonfictional world, 
Car and Bike that extend Vehicle do not glide or fly.

So, in this case if you want to add Batmobile to your vehicle hierarchy, you can use a trait.

Traits are like interfaces in Java, which can also contain code.

In Scala, when a class inherits from a trait, it implements the interface of the trait, 
 and inherits all the code contained in the trait.

Below code shows flying and gliding traits.
flying and gliding traits:

trait flying {
    def fly() = println("flying")
}

trait floating gliding {
def gliding() = println("gliding")
}

Now you can create the Batmobile class that extends Vehicle class along with the flying and gliding traits, 
as shown below:

Using "with"
------------
class Batmobile(speed : Int) extends Vehicle(speed)  with flying with gliding{
override val mph: Int = speed
override  def race() = println("Racing Batmobile")
override def fly() = println("Flying Batmobile")
override def float() = println("Gliding Batmobile")

}

In Scala, traits can inherit classes. (i.e other way of classes implement trait)
The keyword extends is also used when a class inherits a trait as its parent. 


The keyword extends is also used even when the class mixes in other traits using the with keyword. 
Also, extends is used when one trait is the child of another trait or class.

You can now create a Batmobile in the REPL as illustrated here:
scala> val vehicle3 = new Batmobile(300)
vehicle3: Batmobile = Batmobile@374ed5
	Now you can access the fly method of the Batmobile shown here:
scala> vehicle3.fly()
Flying Batmobile


Now create a list of vehicles, then you can use the maxBy method provided by Scala collections library to find 
the fastest vehicle in the list.

scala> val vehicleList = List(vehicle1, vehicle2, vehicle3)
vehicleList: List[Vehicle] = List(Car@562791, Bike@e80317, Batmobile@374ed5)
scala> val fastestVehicle = vehicleList.maxBy(_.mph)
fastestVehicle: Vehicle = Batmobile@374ed5
---------------------------------------------------------------------------------------------------------------

Case Classes:
-------------
Scala has a mechanism for creating classes that have the common stuff filled in. 
Most of the time, when we define a class, we have to write the toString, hashCode, and equals methods. 
These methods are boilerplate.
Scala provides the case class mechanism for filling in these blanks, as well as support for pattern matching. 
A case class provides the same facilities as a normal class, 
but the compiler generates toString, hashCode, and equals methods (which you can override).

Case classes can be instantiated without the use of the new statement. 
By default, all the parameters in the case class’s constructor become properties on the case class.

how to create a case class:
case classStuff(name:String, age: Int)

You can create an instance of Stuff without the keyword new (you can use new if you want):
scala> vals = Stuff("David", 45)
s: Stuff = Stuff(David,45)

The case class’s to String method does the right thing:
scala> s.toString
res70:String = Stuff(David,45)

Stuff’s equals method does a "deep comparison":
scala> s == Stuff("David",45)
res72:Boolean = true
s == Stuff("David",43)
res73:Boolean = false

And the instance has properties:
scala> s.name
res74:String = David
scala> s.age
res75:Int = 45

If you want to write your own class that does the same thing as a case class does, it would look like below:

Implementing case features in a class on its own

classStuff(val name: String,valage: Int) {
overridedeftoString = "Stuff("+name+","+age+")"
overridedefhashCode= name.hashCode+ age
overridedefequals(other: AnyRef)= othermatch {
case s: Stuff=> this.name== s.name &&this.age == s.age
case _ => false
}
}

objectStuff {
defapply(name: String, age: Int) = newStuff(name,age)
defunapply(s: Stuff)= Some((s.name, s.age))
}
Case classes also come in handy for pattern matching will be expored in later chapters(6th).
-----------------------------------------------------------------------------------------------

Value Classes:
-------------------------------
all user-defined classes written in Scala (or Java) extend AnyRef.

With value classes, Scala allows user-defined value classes that extend AnyVal, that is, 
value classes enable you to write classes on the AnyVal side of the Scala type hierarchy. 

Value classes are a new mechanism in Scala to avoid allocating runtime objects. 
Value classes allow you to add extension methods to a type without the runtime overhead of creating instances. 
This is accomplished through the definition of new AnyVal subclasses. 

The following illustrates a value class definition:

class SomeClass(val underlying: Int) extends AnyVal

The preceding SomeClass class has a single, public val parameter that is the underlying runtime representation.
The type at compile time is SomeClass, but at runtime, the representation is an Int. 

A value class can define defs, but no vals, vars, or nested traits classes or objects.

Below illustrates a def in the value class SomeClass.

Note:  A value class can only extend a universal trait. We will explain this in ch 7.

Using def in the value class

    class SomeClass(val i: Int) extends AnyVal {
def twice() = i*2
}

Here SomeClass is a user-defined value class that wraps the Int parameter and encapsulates a twice method. 
To invoke the twice method, create the instance of the SomeClass class as follows:

scala> val v = new SomeClass(9)
v: SomeClass = SomeClass@9
scala> v.twice()
res5: Int = 18

At runtime the expression is optimized to the equivalent of a method class on a static object:
SomeClass.twice$extension(9)
You can check this by compiling SomeClass using scalac and then execute the following command:
javap –v SomeClass

Behind the scenes the Scala compiler generates a companion object for the value class and 
makes the v.twice() calls to the twice$extension method in the companion object.

“$extension” is the suffix added to all the methods extracted from the companion class.

One use case for value classes is to combine them with implicit classes. 
Using an implicit class provides a more convenient syntax for defining extension methods, 
while value classes remove the runtime overhead. 

Implicit classes will be described in detail in Chapter 8.
-------------------------------------------------------------------------------
Scala versus Java versus Ruby:
----------------------------
Scala, Java, and Ruby are all object-oriented languages. They share many similarities and some differences. 
In this section, we’ll compare and contrast these popular languages.

Classes and Instances:
---------------------

Scala and Ruby are pure object-oriented languages. Everything in each language is an instance of a class. 
In Java, there are primitives and statics that are outside of the OO model.

In Scala and Ruby, all operations on entities are via method calls. 
In Java, operators are treated differently and are not method calls. 

The uniformity of instances in Scala means that the developer does not have to perform special tests or 
to have different code paths to deal with primitive data types (int, char, long, and so on.) 
The following is legal in Scala:
scala> 1.hashCode
res0:Int = 1
scala> 2.toString
res1:java.lang.String = 2

You can define a method that takes a function that transforms an Int to an Int:
scala> def with42(in: Int=> Int) = in(42)
and pass a function that is applying the +method to 33:
scala> with42(33+)
res4:Int = 75

At the language level, it’s very convenient and easy on the brain and the design to have everything be uniform. 
Scala and Ruby’s pure OO approach achieves this goal.

As a side note, you may worry about performance. 
The Scala compiler optimizes operations on JVM primitives such that the performance of Scala code is nearly 
identical to the performance of Java code.

Traits, Interfaces, and Mixins
--------------------------------
Every Java class, except Object, has a single superclass.
Java classes may implement one or more interfaces.
An interface is a contract that specifies the methods an implementing class must have.
Java has interfaces. Interfaces define a contract for a given class.
A class has zero or more interfaces. Interfaces define the methods that the class must implement. 

Parameters to a method call may be specifically defined as classes or interfaces. 
Interfaces provide a powerful mechanism for defining the contract that a given class must implement, 
requiring that a parameter to a method implement particular methods without specifying the concrete class 
of the parameter. 

This is the basis for dependency injection, using mocks in testing, and other abstraction patterns.

Scala has traits. Traits provide all the features of Java interfaces. 
However, Scala traits can contain method implementations and variables. 
Traits are a great way of implementing methods once and mixing those methods into all 
the classes that extend the trait.

Ruby has mixins, which are collections of methods that can be mixed into any class. 
Because Ruby does not have static typing and there is no way to declare the types of method parameters, 
there’s no reasonable way to use mixins to define a contract like interfaces. 
Ruby mixins provide a mechanism for composing code into classes but not a mechanism for 
defining or enforcing parameter types.

Object, Static, and Singletons:
-------------------
In Java, a class can have static methods and data. In this way, there is a single point of access to the method, 
and there’s no need to instantiate a class in order to access static methods. 
Static variables provide global access to the data across the JVM.

Scala provides a similar mechanism in the form of objects.
 Objects are implementations of the singleton pattern. 
 There is one object instance per class loader. 
 In this way, it’s possible to have globally shared state. 
 However, objects adhere to Scala’s uniform OO model, and objects are instances of classes rather than 
 some class-level constant. 
This allows objects to be passed as parameters.

Ruby has a singleton mixin that provides the singleton pattern in Ruby programs. 
In addition, Ruby also has class-level methods. In Ruby, you can add methods to the class.
There is one instance of a class object per class in Ruby. 
You can add methods and properties to class objects, and those become globally available without
 instantiating an instance of the class. 
This provides another mechanism for sharing global state.

Functions, Anonymous Inner Classes, and Lambdas/Procs
---------------------------------------
The Java construct to pass units of computation as parameters to methods is anonymous inner classes. 
The use of anonymous inner classes was popularized with the Swing UI libraries.

In Swing, most UI events are handled by interfaces that have one or two methods on them. 
The programmer passes the handlers by instantiating an anonymous inner class that has access to 
the private data of the enclosing class.

Scala’s functions are anonymous inner classes. 
Scala functions implement a uniform API with the apply method being the thing that’s invoked. 
The syntax for creating functions in Scala is much more economical than the three or four lines of 
boilerplate for creating anonymous inner classes in Java. 
Additionally, the rules for accessing variables in the local scope are more flexible in Scala. 

In Java, an anonymous inner class can only access final variables. 
In Scala, a function can access and mutate vars.
Ruby has a collection of overlapping features that allow passing blocks, procs, and lambdas as 
parameters to methods. 
These constructs have subtle differences in Ruby, but at their core they are chunks of code that 
reference variables in the scope in which they were created. 
Ruby also parses blocks such that blocks of code that are passed as parameters in method calls are 
syntactically identical to code blocks in while and if statements.
Scala has much in common with Ruby in terms of an object model and function passing. 
Scala has much in common with Java in terms of uniform access to the same code libraries and static typing.
 Scala has taken the best of both Java and Ruby and blended these things into a very cohesive whole.
 
 

